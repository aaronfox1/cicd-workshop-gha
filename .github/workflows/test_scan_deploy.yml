# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test Scan Deploy

on: 
  push

jobs:
  build_and_test:

    runs-on: ubuntu-latest
    container: node:16.16

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 16.16.0
      uses: actions/setup-node@v3
      with:
        node-version: 16.16.0
        cache: 'npm'
    - run: npm install
    - run: npm run test-ci
    - name: Copy tests results for storing
      run: |
        mkdir test-results
        cp test-results.xml test-results/ 
    # Potential issue running these if tests fail - need to check
    - name: Store test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results

  dependency_vulnerability_scan:
    runs-on: ubuntu-latest
    container: node:16.16
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical


  build_docker_image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true # Tag with version???
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-gha:0.1.${{ github.run_number }}


  create_do_k8s_cluster:
    runs-on: ubuntu-latest
    needs: 
      - build_and_test
      - dependency_vulnerability_scan 
      - build_docker_image

    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Create .terraformrc file locally
        run: |
          echo -en "credentials \"app.terraform.io\" {token = \"${{secrets.TF_CLOUD_TOKEN}}\"}" > $HOME/.terraformrc
          # Create backend file for terraform init with unique TF Cloud org
          echo -en "organization = \"${{vars.TF_CLOUD_ORGANIZATION}}\"\nworkspaces{name =\"${{vars.TF_CLOUD_WORKSPACE}}\"}" > ./terraform/digital_ocean/do_create_k8s/remote_backend_config
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Create K8S cluster on Digital Ocean
        run: |
          export CLUSTER_NAME=${{github.repository_owner}}-${{ github.event.repository.name }}-gha
          export DO_K8S_SLUG_VER="$(doctl kubernetes options versions \
            -o json -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} | jq -r '.[0] | .slug')"
          # Initialize terraform with unique org name
          terraform -chdir=terraform/digital_ocean/do_create_k8s init \
            -backend-config=remote_backend_config
          # Execute k8s creation
          terraform -chdir=terraform/digital_ocean/do_create_k8s apply -auto-approve \
            -var do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            -var cluster_name=$CLUSTER_NAME \
            -var do_k8s_slug_ver=$DO_K8S_SLUG_VER

  deploy_to_k8s:
    runs-on: ubuntu-latest
    needs: 
      - create_do_k8s_cluster
    outputs:
      deploy_endpoint: ${{ steps.deploy.outputs.lb_public_ip }}

    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Create .terraformrc file locally
        run: |
          echo -en "credentials \"app.terraform.io\" {token = \"${{secrets.TF_CLOUD_TOKEN}}\"}" > $HOME/.terraformrc
          # Create backend file for terraform init with unique TF Cloud org
          echo -en "organization = \"${{vars.TF_CLOUD_ORGANIZATION}}\"\nworkspaces{name =\"${{vars.TF_CLOUD_WORKSPACE}}-deployment\"}" > ./terraform/digital_ocean/do_k8s_deploy_app/remote_backend_config
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Deploy Application to K8s on DigitalOcean
        id: deploy
        run: |
          export CLUSTER_NAME=${{github.repository_owner}}-${{ github.event.repository.name }}-gha
          export TAG=0.1.${{ github.run_number }}
          export DOCKER_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-gha:$TAG"
          
          doctl kubernetes cluster kubeconfig save $CLUSTER_NAME

          # Initialize terraform with unique org name
          terraform -chdir=terraform/digital_ocean/do_k8s_deploy_app init \
            -backend-config=remote_backend_config

          # Execute apply comand 
          terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app apply -auto-approve \
            -var do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            -var cluster_name=$CLUSTER_NAME \
            -var docker_image=$DOCKER_IMAGE

      # - name: Output

      #     echo "BEGIN EXPERIMENT WITH GITHUB ENV"
      #     # Save the Load Balancer Public IP Address
      #     terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app output lb_public_ip
      #     # terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app output lb_public_ip >> $GITHUB_ENV
      #     # echo $GITHUB_ENV

      #     # TODO: saving this is broken, skipping test for now
      #     ENDPOINT=::output $(terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app output lb_public_ip)
      #     echo "ENDPOINT={$ENDPOINT}" >> $GITHUB_OUTPUT

      #     echo $GITHUB_OUTPUT
      #     echo $ENDPOINT
          
          # echo "endpoint export"
          # echo $ENDPOINT

          # mkdir -p /tmp/do_k8s/
          # echo 'export ENDPOINT='${ENDPOINT} > /tmp/do_k8s/dok8s-endpoint
          # cat /tmp/do_k8s/dok8s-endpoint
          

          # steps:
          #   - name: Set the value in bash
          #     id: step_one
          #     run: |
          #       EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          #       echo "JSON_RESPONSE<<$EOF" >> $GITHUB_ENV
          #       curl https://example.com >> $GITHUB_ENV
          #       echo "$EOF" >> $GITHUB_ENV

        #   - name: Set color
        #   id: random-color-generator
        #   run: echo "SELECTED_COLOR=green" >> $GITHUB_OUTPUT
        # - name: Get color
        #   run: echo "The selected color is ${{ steps.random-color-generator.outputs.SELECTED_COLOR }}"

      # - uses: actions/upload-artifact@v3
      #   with: 
      #     name: dok8s-endpoint
      #     path: /tmp/do_k8s/dok8s-endpoint
  
  smoketest_k8s_deployment:
    runs-on: ubuntu-latest
    needs: 
      - deploy_to_k8s
    env:
      DEPLOY_ENDPOINT: ${{needs.deploy_to_k8s.outputs.deploy_endpoint}}
    steps:
      - uses: actions/checkout@v3
      # - uses: actions/download-artifact@v3
      #   with: 
      #     name: dok8s-endpoint
      #     path: /tmp/do_k8s/
      - name: Smoke Test K8s App Deployment
        run: |
          # source /tmp/do_k8s/dok8s-endpoint
          # ./test/smoke_test $ENDPOINT
          
          echo "try show deploy endpoint"
          echo $DEPLOY_ENDPOINT
          echo ${{ needs.deploy_to_k8s.outputs.deploy_endpoint}}

  destroy_k8s_cluster:
    runs-on: ubuntu-latest
    # approval required - tied to environment in gh
    environment: destroy-prod 
    needs: 
      - smoketest_k8s_deployment
    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Create .terraformrc file locally
        run: |
          echo -en "credentials \"app.terraform.io\" {token = \"${{secrets.TF_CLOUD_TOKEN}}\"}" > $HOME/.terraformrc
          # Create backend file for terraform init with unique TF Cloud org
          echo -en "organization = \"${{vars.TF_CLOUD_ORGANIZATION}}\"\nworkspaces{name =\"${{vars.TF_CLOUD_WORKSPACE}}\"}" > ./terraform/digital_ocean/do_create_k8s/remote_backend_config
          # Create backend file for terraform init with unique TF Cloud org
          echo -en "organization = \"${{vars.TF_CLOUD_ORGANIZATION}}\"\nworkspaces{name =\"${{vars.TF_CLOUD_WORKSPACE}}-deployment\"}" > ./terraform/digital_ocean/do_k8s_deploy_app/remote_backend_config
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Destroy App Deployment
        run: |
          export CLUSTER_NAME=${{github.repository_owner}}-${{ github.event.repository.name }}-gha
          export TAG=0.1.${{ github.run_number }}
          export DOCKER_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-gha:$TAG"
         
          doctl kubernetes cluster kubeconfig save $CLUSTER_NAME
          
          # Initialize terraform with unique org name
          terraform -chdir=terraform/digital_ocean/do_k8s_deploy_app init \
            -backend-config=remote_backend_config

          terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app/ apply -destroy -auto-approve \
            -var do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            -var cluster_name=$CLUSTER_NAME \
            -var docker_image=$DOCKER_IMAGE
      - name: Destroy K8s Cluster
        run: |
          export CLUSTER_NAME=${{github.repository_owner}}-${{ github.event.repository.name }}-gha
          export DO_K8S_SLUG_VER="$(doctl kubernetes options versions \
            -o json -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} | jq -r '.[0] | .slug')"

          # Initialize terraform with unique org name
          terraform -chdir=terraform/digital_ocean/do_create_k8s init \
            -backend-config=remote_backend_config

          terraform -chdir=./terraform/digital_ocean/do_create_k8s apply -destroy -auto-approve \
            -var do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            -var cluster_name=$CLUSTER_NAME \
            -var do_k8s_slug_ver=$DO_K8S_SLUG_VER

