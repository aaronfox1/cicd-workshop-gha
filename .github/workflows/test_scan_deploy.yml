# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test Scan Deploy

on: push

jobs:
  build_and_test:

    runs-on: ubuntu-latest
    container: node:16.16

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 16.16.0
      uses: actions/setup-node@v3
      with:
        node-version: 16.16.0
        cache: 'npm'
    - run: npm install
    - run: npm run test-ci
    - name: Copy tests results for storing
      run: |
        mkdir test-results
        cp test-results.xml test-results/ 
    # Potential issue running these if tests fail - need to check
    - name: Store test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results

  dependency_vulnerability_scan:
    runs-on: ubuntu-latest
    container: node:16.16
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical


  build_docker_image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true # Tag with version???
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-gha:0.1.${{ github.run_number }}


  create_do_k8s_cluster:
    runs-on: ubuntu-latest
    needs: 
      - build_and_test
      - dependency_vulnerability_scan 
      - build_docker_image

    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Create .terraformrc file locally
        run: |
          echo -en "credentials \"app.terraform.io\" {token = \"${{secrets.TF_CLOUD_TOKEN}}\"}" > $HOME/.terraformrc
          # Create backend file for terraform init with unique TF Cloud org
          
          echo "outputs for debug"
          cat $HOME/.terraformrc
          pwd
          ls 
          ls terraform

          echo -en "organization = \"${{vars.TF_CLOUD_ORGANIZATION}}\"\nworkspaces{name =\"${{vars.TF_CLOUD_WORKSPACE}}\"}" > ./terraform/digital_ocean/do_create_k8s/remote_backend_config
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Create K8S cluster on Digital Ocean
        run: |
          export CLUSTER_NAME=${{github.repository_owner}}-${{ github.event.repository.name }}-gha
          export DO_K8S_SLUG_VER="$(doctl kubernetes options versions \
            -o json -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} | jq -r '.[0] | .slug')"
          # Initialize terraform with unique org name
          terraform -chdir=terraform/digital_ocean/do_create_k8s init \
            -backend-config=remote_backend_config
          # Execute k8s creation
          terraform -chdir=terraform/digital_ocean/do_create_k8s apply -auto-approve \
            -var do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            -var cluster_name=$CLUSTER_NAME \
            -var do_k8s_slug_ver=$DO_K8S_SLUG_VER

  deploy_to_k8s:
    runs-on: ubuntu-latest
    needs: 
      - create_do_k8s_cluster
  
    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Create .terraformrc file locally
        run: |
          echo -en "credentials \"app.terraform.io\" {token = \"${{secrets.TF_CLOUD_TOKEN}}\"}" > $HOME/.terraformrc
          # Create backend file for terraform init with unique TF Cloud org
          
          echo "outputs for debug"
          cat $HOME/.terraformrc
          pwd
          ls 
          ls terraform

          echo -en "organization = \"${{vars.TF_CLOUD_ORGANIZATION}}\"\nworkspaces{name =\"${{vars.TF_CLOUD_WORKSPACE}}-deployment\"}" > ./terraform/digital_ocean/do_create_k8s/remote_backend_config
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Deploy Application to K8s on DigitalOcean
        run: |
          export CLUSTER_NAME=${{github.repository_owner}}-${{ github.event.repository.name }}-gha
          export TAG=0.1.${{ github.run_number }}
          export DOCKER_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-gha:$TAG"
          
          doctl kubernetes cluster kubeconfig save $CLUSTER_NAME

          # Initialize terraform with unique org name
          terraform -chdir=terraform/digital_ocean/do_k8s_deploy_app init \
            -backend-config=remote_backend_config

          # Execute apply comand 
          terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app apply -auto-approve \
            -var do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            -var cluster_name=$CLUSTER_NAME \
            -var docker_image=$DOCKER_IMAGE

          # Save the Load Balancer Public IP Address
          export ENDPOINT="$(terraform -chdir=./terraform/digital_ocean/do_k8s_deploy_app output lb_public_ip)"
          mkdir -p /tmp/do_k8s/
          echo 'export ENDPOINT='${ENDPOINT} > /tmp/do_k8s/dok8s-endpoint
          
      - uses: actions/upload-artifact@v3
        with: 
          name: dok8s-endpoint
          path: /tmp/do_k8s/dok8s-endpoint
  
  smoketest_k8s_deployment:
    runs-on: ubuntu-latest
    needs: 
      - deploy_to_k8s
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with: 
          name: dok8s-endpoint
          path: /tmp/do_k8s/
      - name: Smoke Test K8s App Deployment
        run: |
          source /tmp/do_k8s/dok8s-endpoint
          ./test/smoke_test $ENDPOIN

      # Artifact
  

  # build_and_test_cimg:
  #   runs-on: ubuntu-latest
  #   container: cimg/node:16.16.0

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Use Node.js 16.16.0
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: 16.16.0
  #       cache: 'npm'
  #   - run: npm install
  #   - run: npm run test-ci
  #   - name: Copy tests results for storing
  #     run: |
  #       mkdir test-results
  #       cp test-results.xml test-results/ 
  #   # Potential issue running these if tests fail - need to check
  #   - name: Store test results
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: test-results
  #       path: |
  #         test-results
            
